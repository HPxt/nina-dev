/**
 * @fileoverview Firestore Security Rules for the Nina 1.0 application.
 *
 * Core Philosophy: This ruleset enforces a strict user-ownership model for
 * employee-related data (interactions, PDI actions, meetings) and role-based
 * access for managing employees, roles, and teams.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /employees/{employeeId}/interactions/{interactionId}: Stores interaction
 *   data for a specific employee.
 * - /employees/{employeeId}/pdiActions/{pdiActionId}: Stores PDI actions for
 *   a specific employee.
 * - /employees/{employeeId}/meetings/{meetingId}: Stores meeting data for a
 *   specific employee.
 * - /roles/{roleId}: Stores role definitions.
 * - /teams/{teamId}: Stores team definitions.
 *
 * Key Security Decisions:
 * - User data is nested under /employees/{employeeId} to enforce ownership.
 * - Listing of employee data is restricted to authorized personnel.
 *
 * Denormalization for Authorization:
 * - Employee documents do not currently denormalize role or team information.
 *   If access control depends on these relationships, they should be denormalized
 *   into the employee document to avoid costly `get()` operations in security rules.
 *
 * Structural Segregation:
 * - Private employee data (interactions, PDI actions, meetings) is stored in
 *   subcollections under /employees/{employeeId}, while public data (roles,
 *   teams) is stored in top-level collections. This ensures a clear separation
 *   of access control requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to employee documents based on ownership or role.
     * @path /employees/{employeeId}
     * @allow (get) Signed-in user can get any employee document.
     * @allow (list) Signed-in user can list employee documents.
     * @allow (create) Only allow creation
     * @allow (update) Signed-in user can update any employee document.
     * @allow (delete) Signed-in user can delete any employee document.
     * @deny (create) Non-signed-in user cannot create employee documents.
     * @deny (update) Non-signed-in user cannot update employee documents.
     * @deny (delete) Non-signed-in user cannot delete employee documents.
     * @principle Enforces document ownership for writes and open reads
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to interaction documents based on employee ownership.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (get) Signed-in user can get any interaction document.
     * @allow (list) Signed-in user can list interaction documents if they are the owner of the employee document.
     * @allow (create) Signed-in user can create interaction documents.
     * @allow (update) Signed-in user can update any interaction document.
     * @allow (delete) Signed-in user can delete any interaction document.
     * @deny (create) Non-signed-in user cannot create interaction documents.
     * @deny (list) Non-owner cannot list interaction documents.
     * @deny (update) Non-signed-in user cannot update interaction documents.
     * @deny (delete) Non-signed-in user cannot delete interaction documents.
     * @principle Enforces document ownership for writes and open reads, restricts listing to owners.
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get: if true;
      allow list: if isOwner(employeeId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to PDI action documents based on employee ownership.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (get) Signed-in user can get any pdiAction document.
     * @allow (list) Signed-in user can list pdiAction documents if they are the owner of the employee document.
     * @allow (create) Signed-in user can create pdiAction documents.
     * @allow (update) Signed-in user can update any pdiAction document.
     * @allow (delete) Signed-in user can delete any pdiAction document.
     * @deny (create) Non-signed-in user cannot create pdiAction documents.
     * @deny (list) Non-owner cannot list pdiAction documents.
     * @deny (update) Non-signed-in user cannot update pdiAction documents.
     * @deny (delete) Non-signed-in user cannot delete pdiAction documents.
     * @principle Enforces document ownership for writes and open reads, restricts listing to owners.
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get: if true;
      allow list: if isOwner(employeeId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows access to meeting documents based on employee ownership.
     * @path /employees/{employeeId}/meetings/{meetingId}
     * @allow (get) Signed-in user can get any meeting document.
     * @allow (list) Signed-in user can list meeting documents if they are the owner of the employee document.
     * @allow (create) Signed-in user can create meeting documents.
     * @allow (update) Signed-in user can update any meeting document.
     * @allow (delete) Signed-in user can delete any meeting document.
     * @deny (create) Non-signed-in user cannot create meeting documents.
     * @deny (list) Non-owner cannot list meeting documents.
     * @deny (update) Non-signed-in user cannot update meeting documents.
     * @deny (delete) Non-signed-in user cannot delete meeting documents.
     * @principle Enforces document ownership for writes and open reads, restricts listing to owners.
     */
    match /employees/{employeeId}/meetings/{meetingId} {
      allow get: if true;
      allow list: if isOwner(employeeId);
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Allows read access to role documents.
     * @path /roles/{roleId}
     * @allow (get) Signed-in user can get any role document.
     * @allow (list) Signed-in user can list role documents.
     * @deny (create) Non-signed-in user cannot create role documents.
     * @deny (update) Non-signed-in user cannot update role documents.
     * @deny (delete) Non-signed-in user cannot delete role documents.
     * @principle Allows public read access to roles.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows read access to team documents.
     * @path /teams/{teamId}
     * @allow (get) Signed-in user can get any team document.
     * @allow (list) Signed-in user can list team documents.
     * @deny (create) Non-signed-in user cannot create team documents.
     * @deny (update) Non-signed-in user cannot update team documents.
     * @deny (delete) Non-signed-in user cannot delete team documents.
     * @principle Allows public read access to teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper function to determine if the user is signed in.
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to determine if the user is the owner of the document.
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}