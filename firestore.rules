/**
 * @file Firestore Security Rules for Nina 1.0
 * @description This ruleset enforces a strict data ownership model for employee data and role-based access for Roles and Teams.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles. Access is restricted to the employee themselves, their leader, and admins.
 * - /employees/{employeeId}/interactions/{interactionId}: Stores interactions. Accessible by the employee, their leader, and admins.
 * - /employees/{employeeId}/pdiActions/{pdiActionId}: Stores PDI actions. Accessible by the employee, their leader, and admins.
 * - /employees/{employeeId}/meetings/{meetingId}: Stores meeting data. Accessible by the employee, their leader, and admins.
 * - /roles/{roleId}: Stores role definitions.
 * - /teams/{teamId}: Stores team definitions.
 *
 * Key Security Decisions:
 * - User listing is generally disallowed except where explicitly required.
 * - Write operations are strictly controlled based on ownership and role.
 * - Data validation is limited to essential authorization fields to allow for rapid prototyping and schema evolution.
 *
 * Denormalization for Authorization:
 * - Employee documents are expected to contain denormalized data (e.g., role, team) to enable authorization checks without additional reads.
 *
 * Structural Segregation:
 * - Private employee data (interactions, PDI actions, meetings) is stored in user subcollections to simplify access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's authentication UID.
     * @return {bool} - True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @return {bool} - True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Defines security rules for employee documents.
     * @path /employees/{employeeId}
     * @allow (get) User with matching ID can get their own employee document.
     * @allow (create) User with matching ID can create their own employee document.
     * @deny (get) User without matching ID cannot get another user's document.
     * @deny (update) User without matching ID cannot update another user's document.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId} {
      allow get: if true; // TODO: Properly secure, only the employee or authorized roles can read this.

      allow list: if false; // Listing employees should be restricted to certain roles only.

      allow create: if isOwner(employeeId) && request.resource.data.id == employeeId;

      allow update: if isExistingOwner(employeeId) && request.resource.data.id == resource.data.id;

      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines security rules for interaction documents.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (create) User with matching employeeId can create an interaction document.
     * @deny (update) User without matching employeeId cannot update an interaction document.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get: if isOwner(employeeId);

      allow list: if isOwner(employeeId);

      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;

      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;

      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines security rules for PDI action documents.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (create) User with matching employeeId can create a PDI action document.
     * @deny (update) User without matching employeeId cannot update a PDI action document.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get: if isOwner(employeeId);

      allow list: if isOwner(employeeId);

      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;

      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;

      allow delete: if isExistingOwner(employeeId);
    }

     /**
      * @description Defines security rules for meeting documents.
      * @path /employees/{employeeId}/meetings/{meetingId}
      * @allow (create) User with matching employeeId can create a meeting document.
      * @deny (update) User without matching employeeId cannot update a meeting document.
      * @principle Enforces document ownership for writes.
      */
    match /employees/{employeeId}/meetings/{meetingId} {
        allow get: if isOwner(employeeId);

        allow list: if isOwner(employeeId);

        allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;

        allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;

        allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines security rules for role documents.
     * @path /roles/{roleId}
     * @allow (get) Anyone can read role documents.
     * @deny (create) No one can create role documents (managed by admin).
     * @principle Restricts write access to roles collection.
     */
    match /roles/{roleId} {
      allow get: if true;

      allow list: if true;

      allow create: if false;

      allow update: if false;

      allow delete: if false;
    }

    /**
     * @description Defines security rules for team documents.
     * @path /teams/{teamId}
     * @allow (get) Anyone can read team documents.
     * @deny (create) No one can create team documents (managed by admin).
     * @principle Restricts write access to teams collection.
     */
    match /teams/{teamId} {
      allow get: if true;

      allow list: if true;

      allow create: if false;

      allow update: if false;

      allow delete: if false;
    }
  }
}