/**
 * @description This ruleset enforces a strict user-ownership model for employee-related data (interactions, PDI actions, meetings) and role-based access for roles and teams.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles. Access is restricted to the employee themselves, their leader, and admins.
 * - /employees/{employeeId}/interactions/{interactionId}: Stores interactions for an employee.  Access is restricted to the employee, their leader, and admins.
 * - /employees/{employeeId}/pdiActions/{pdiActionId}: Stores PDI actions for an employee. Access is restricted to the employee, their leader, and admins.
 * - /employees/{employeeId}/meetings/{meetingId}: Stores meetings scheduled for an employee. Access is restricted to the employee, their leader, and admins.
 * - /roles/{roleId}: Stores role definitions.
 * - /teams/{teamId}: Stores team definitions.
 *
 * Key Security Decisions:
 * - Listing of employees is implicitly allowed based on the structure and reasoning. More restrictive rules (e.g., based on roles or organizational access) may be implemented.
 * - Subcollections under /employees/{employeeId} are secured using path-based ownership.
 * - Roles and Teams collections are open.
 *
 * Denormalization for Authorization:
 * - Employee documents are expected to contain denormalized data from Roles and Teams if needed to ensure authorization independence at the employee level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows employees to read their own profile, and authorized personnel (leaders, admins) to manage employee data.
     * @path /employees/{employeeId}
     * @allow (get) request.auth.uid != null
     * @allow (create) request.auth.uid == request.resource.data.id3a
     * @allow (update) request.auth.uid != null
     * @allow (delete) request.auth.uid != null
     * @deny (create) request.auth.uid != request.resource.data.id3a
     * @deny (update) request.auth.uid == null
     * @deny (delete) request.auth.uid == null
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if request.auth.uid == request.resource.data.id3a;
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows employees, their leaders, and admins to manage interactions for a specific employee.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (get) request.auth.uid != null
     * @allow (create) request.auth.uid != null
     * @allow (update) request.auth.uid != null
     * @allow (delete) request.auth.uid != null
     * @deny (create) request.auth.uid == null
     * @deny (update) request.auth.uid == null
     * @deny (delete) request.auth.uid == null
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows employees, their leaders, and admins to manage PDI actions for a specific employee.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (get) request.auth.uid != null
     * @allow (create) request.auth.uid != null
     * @allow (update) request.auth.uid != null
     * @allow (delete) request.auth.uid != null
     * @deny (create) request.auth.uid == null
     * @deny (update) request.auth.uid == null
     * @deny (delete) request.auth.uid == null
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

   /**
     * @description Allows employees, their leaders, and admins to manage meetings for a specific employee.
     * @path /employees/{employeeId}/meetings/{meetingId}
     * @allow (get) request.auth.uid != null
     * @allow (create) request.auth.uid != null
     * @allow (update) request.auth.uid != null
     * @allow (delete) request.auth.uid != null
     * @deny (create) request.auth.uid == null
     * @deny (update) request.auth.uid == null
     * @deny (delete) request.auth.uid == null
     * @principle Enforces document ownership for writes, restricts access to a user's own data tree.
     */
    match /employees/{employeeId}/meetings/{meetingId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Allows read and write access to all roles.
     * @path /roles/{roleId}
     * @allow (get) if true
     * @allow (create) if true
     * @allow (update) if true
     * @allow (delete) if true
     * @principle Open access to roles.
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows read and write access to all teams.
     * @path /teams/{teamId}
     * @allow (get) if true
     * @allow (create) if true
     * @allow (update) if true
     * @allow (delete) if true
     * @principle Open access to teams.
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}