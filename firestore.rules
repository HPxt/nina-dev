/**
 * @file Firebase Security Rules for the Nina 1.0 application.
 *
 * @core_philosophy This ruleset enforces a strict user-ownership model for employee-related data (interactions, PDI actions, meetings) stored as subcollections.
 *   Top-level collections (employees, roles, teams) are secured based on roles and potential future custom claims (DBAC).
 *   Denormalization is used to avoid costly `get()` calls within the rules.
 * @data_structure The Firestore database is structured with a top-level collection for employees, roles, and teams.
 *   Employee-specific data (interactions, PDI actions, meetings) are stored as subcollections under each employee document.
 * @key_security_decisions Listing employees is generally allowed but could be further restricted based on roles (requires additional role/permission implementation).
 *   User listing is generally disallowed except for specific scenarios (e.g., admins).
 *   These rules are written to be authorization-centric with simplified data validation for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a signed-in user.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the request is made by the owner of the resource.
     * @param {string} userId - The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the request is made by the owner of the resource and the resource exists.
     * @param {string} userId - The user ID to compare against the resource's owner ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for the /employees/{employeeId} collection.
     * @path /employees/{employeeId}
     * @allow (get) Authenticated user can read any employee data.
     * @deny (create) Non-authenticated user cannot create employee data.
     * @principle Allows read access to all authenticated users. Owner-only for writes.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Add role-based access for employee creation.
      allow update: if false; // TODO: Add role-based access for employee updates.
      allow delete: if false; // TODO: Add role-based access for employee deletion.
    }

    /**
     * @description Rules for the /employees/{employeeId}/interactions/{interactionId} collection.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (create) User can create an interaction for themselves.
     * @deny (update) User cannot update an interaction they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Rules for the /employees/{employeeId}/pdiActions/{pdiActionId} collection.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (create) User can create a PDI action for themselves.
     * @deny (update) User cannot update a PDI action they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Rules for the /employees/{employeeId}/meetings/{meetingId} collection.
     * @path /employees/{employeeId}/meetings/{meetingId}
     * @allow (create) User can create a meeting for themselves.
     * @deny (update) User cannot update a meeting they don't own.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/meetings/{meetingId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isSignedIn() && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.employeeId == resource.data.employeeId;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Rules for the /roles/{roleId} collection.
     * @path /roles/{roleId}
     * @allow (get) Any signed-in user can read role data.
     * @deny (create) Only admins can create roles (not yet implemented).
     * @principle Allows public read access.  Restricts writes to admins.
     */
    match /roles/{roleId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement admin-only role creation.
      allow update: if false; // TODO: Implement admin-only role updates.
      allow delete: if false; // TODO: Implement admin-only role deletion.
    }

    /**
     * @description Rules for the /teams/{teamId} collection.
     * @path /teams/{teamId}
     * @allow (get) Any signed-in user can read team data.
     * @deny (create) Only admins can create teams (not yet implemented).
     * @principle Allows public read access. Restricts writes to admins.
     */
    match /teams/{teamId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false; // TODO: Implement admin-only team creation.
      allow update: if false; // TODO: Implement admin-only team updates.
      allow delete: if false; // TODO: Implement admin-only team deletion.
    }
  }
}