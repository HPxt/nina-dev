/**
 * @fileoverview Firestore Security Rules for the Nina 1.0 application.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open access for
 * Roles and Teams with strict user-ownership for employee data and
 * resource-based authorization for employee subcollections. It leverages path-based
 * authorization and denormalization to avoid complex queries and ensure
 * efficient security rule evaluation.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profile information.
 * - /employees/{employeeId}/interactions/{interactionId}: Stores interaction
 *   logs for each employee.
 * - /employees/{employeeId}/pdiActions/{pdiActionId}: Stores Personal
 *   Development Items for each employee.
 * - /employees/{employeeId}/meetings/{meetingId}: Stores meetings scheduled for
 *   each employee.
 * - /roles/{roleId}: Stores role definitions and permissions.
 * - /teams/{teamId}: Stores team information.
 *
 * Key Security Decisions:
 * - Roles and Teams are readable by anyone for application flexibility.
 * - Listing employees is restricted to signed-in users.
 * - Employee-owned data (interactions, PDI actions, meetings) is strictly
 *   controlled by the employee's ownership.
 * - All write operations are protected by authorization checks.
 *
 * Denormalization for Authorization:
 * This ruleset avoids `get()` calls by assuming role information is denormalized
 * onto the employee document. This is essential for fast and scalable security
 * checks, especially when dealing with subcollections.
 *
 * Structural Segregation:
 * Private employee data (interactions, PDI actions, meetings) is stored in
 * subcollections under the /employees/{employeeId} path, while more public
 * data like roles and teams are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and writing of employee documents to authenticated users.
     * @path /employees/{employeeId}
     * @allow (get, list) if isSignedIn()
     * @allow (create, update, delete) if isOwner(employeeId)
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces document ownership for writes; requires authentication for reads.
     */
    match /employees/{employeeId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isOwner(employeeId);
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Allows employees, their leaders, and admins to manage interactions.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (create, update, delete) if isOwner(employeeId)
     * @deny (create, update, delete) if !isSignedIn()
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId);
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Allows employees, their leaders, and admins to manage PDI actions.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (create, update, delete) if isOwner(employeeId)
     * @deny (create, update, delete) if !isSignedIn()
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId);
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Allows employees, their leaders, and admins to manage meetings.
     * @path /employees/{employeeId}/meetings/{meetingId}
     * @allow (create, update, delete) if isOwner(employeeId)
     * @deny (create, update, delete) if !isSignedIn()
     */
    match /employees/{employeeId}/meetings/{meetingId} {
      allow get: if isOwner(employeeId);
      allow list: if isOwner(employeeId);
      allow create: if isOwner(employeeId);
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Allows anyone to read role documents.
     * @path /roles/{roleId}
     * @allow get, list: if true;
     */
    match /roles/{roleId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read team documents.
     * @path /teams/{teamId}
     * @allow get, list: if true;
     */
    match /teams/{teamId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
  }
}