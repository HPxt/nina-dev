/**
 * @fileOverview Firestore Security Rules for the Nina 1.0 application.
 *
 * Core Philosophy:
 * This ruleset enforces a hierarchical ownership model combined with role-based access where appropriate. Employee-owned data is stored in subcollections under each employee document, simplifying security rules based on path-based authorization.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee profiles.
 * - /employees/{employeeId}/interactions/{interactionId}: Stores interactions related to a specific employee.
 * - /employees/{employeeId}/pdiActions/{pdiActionId}: Stores Personal Development Plan actions for an employee.
 * - /employees/{employeeId}/meetings/{meetingId}: Stores meeting data for an employee.
 * - /roles/{roleId}: Stores role definitions and permissions.
 * - /teams/{teamId}: Stores team information.
 *
 * Key Security Decisions:
 * - Strict ownership is enforced for employee subcollections (interactions, PDI actions, meetings). Only the employee and authorized personnel can access these.
 * - Roles and Teams are top-level collections with potentially broader access control (to be defined).
 * - Listing all users is not explicitly denied but depends on the rules for the `/employees` collection.
 *
 * Denormalization for Authorization:
 *  None.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @example isSignedIn() returns true if request.auth != null.
     * @principle Verified Identity.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user ID matches the provided user ID.
     * @param {string} userId - The user ID to compare against.
     * @example isOwner('user123') returns true if request.auth.uid == 'user123'.
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

        /**
     * @description Checks if the authenticated user is the owner of an existing document.
     * @param {string} userId - The user ID that should own the document.
     * @example isExistingOwner('user123') returns true if request.auth.uid == 'user123' and the document exists.
     * @principle Enforces document ownership and existence for updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
    
    /**
     * @description Defines the rules for the /employees collection.
     * @path /employees/{employeeId}
     * @allow (get) - Any signed-in user can get any employee document.
     * @allow (list) - Any signed-in user can list employee documents.
     * @allow (create) - Only the user whose ID matches the employeeId can create an employee document.
     * @allow (update) - Only the user whose ID matches the employeeId can update an employee document.
     * @allow (delete) - Only the user whose ID matches the employeeId can delete the employee document.
     * @deny (create) - If the authenticated user ID does not match the employeeId path parameter.
     * @deny (update) - If the authenticated user ID does not match the existing employee document's ID.
     * @deny (delete) - If the authenticated user ID does not match the existing employee document's ID.
     * @principle Enforces document ownership and requires authentication.
     */
    match /employees/{employeeId} {
      allow get, list: if isSignedIn();
      allow create: if isOwner(employeeId) && request.resource.data.id3a == employeeId;
      allow update: if isExistingOwner(employeeId) && request.resource.data.id3a == resource.data.id3a;
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines the rules for the /employees/{employeeId}/interactions collection.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (get) - Only the employee (owner) can get the interaction.
     * @allow (list) - Only the employee (owner) can list interactions.
     * @allow (create) - Only the employee (owner) can create an interaction. The employeeId must match.
     * @allow (update) - Only the employee (owner) can update the interaction.
     * @allow (delete) - Only the employee (owner) can delete the interaction.
     * @deny (create) - If the interaction's employeeId doesn't match the path.
     * @deny (update) - If not the owner or the document doesn't exist.
     * @deny (delete) - If not the owner or the document doesn't exist.
     * @principle Enforces document ownership for writes, requires authentication, and validates relational integrity.
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get, list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines the rules for the /employees/{employeeId}/pdiActions collection.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (get) - Only the employee (owner) can get the PDI action.
     * @allow (list) - Only the employee (owner) can list PDI actions.
     * @allow (create) - Only the employee (owner) can create a PDI action. The employeeId must match.
     * @allow (update) - Only the employee (owner) can update the PDI action.
     * @allow (delete) - Only the employee (owner) can delete the PDI action.
     * @deny (create) - If the pdiAction's employeeId doesn't match the path.
     * @deny (update) - If not the owner or the document doesn't exist.
     * @deny (delete) - If not the owner or the document doesn't exist.
     * @principle Enforces document ownership for writes, requires authentication, and validates relational integrity.
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get, list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines the rules for the /employees/{employeeId}/meetings collection.
     * @path /employees/{employeeId}/meetings/{meetingId}
     * @allow (get) - Only the employee (owner) can get the meeting.
     * @allow (list) - Only the employee (owner) can list meetings.
     * @allow (create) - Only the employee (owner) can create a meeting. The employeeId must match.
     * @allow (update) - Only the employee (owner) can update the meeting.
     * @allow (delete) - Only the employee (owner) can delete the meeting.
     * @deny (create) - If the meeting's employeeId doesn't match the path.
     * @deny (update) - If not the owner or the document doesn't exist.
     * @deny (delete) - If not the owner or the document doesn't exist.
     * @principle Enforces document ownership for writes, requires authentication, and validates relational integrity.
     */
    match /employees/{employeeId}/meetings/{meetingId} {
      allow get, list: if isOwner(employeeId);
      allow create: if isOwner(employeeId) && request.resource.data.employeeId == employeeId;
      allow update: if isExistingOwner(employeeId);
      allow delete: if isExistingOwner(employeeId);
    }

    /**
     * @description Defines the rules for the /roles collection.
     * @path /roles/{roleId}
     */
    match /roles/{roleId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false; // TODO: Add role-based authorization for managing roles.
    }

    /**
     * @description Defines the rules for the /teams collection.
     * @path /teams/{teamId}
     */
    match /teams/{teamId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;  // TODO: Add role-based authorization for managing teams.
    }
  }
}