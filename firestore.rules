/**
 * @description This ruleset enforces a strict user-ownership model for employee-related data (interactions, PDI actions, meetings) and role-based access for employees, roles and teams.
 *
 * Data Structure:
 * - /employees/{employeeId}: Stores employee data.
 * - /employees/{employeeId}/interactions/{interactionId}: Stores interactions for a specific employee.
 * - /employees/{employeeId}/pdiActions/{pdiActionId}: Stores PDI actions for a specific employee.
 * - /employees/{employeeId}/meetings/{meetingId}: Stores meetings for a specific employee.
 * - /roles/{roleId}: Stores role data.
 * - /teams/{teamId}: Stores team data.
 *
 * Key Security Decisions:
 * - Employees collection writes are open, but this should be revisited during full implementation with role-based access control (RBAC).
 * - All employee-owned data (interactions, PDI actions, meetings) is secured via path-based ownership. Only the employee (or admin-level user) can create, update, or delete data in these subcollections.
 * - Listing of subcollections is restricted to the owner (employee).
 * - Denormalization of roles onto employee documents should be considered for more granular and performant access control in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows read and write access to employee documents. This is an open write, but should be secured by RBAC in a full implementation.
     * @path /employees/{employeeId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if true; // TODO: Add role-based access control.
     * @deny (create): if false;
     * @principle Allows admins and leaders to manage employee data.
     */
    match /employees/{employeeId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add role-based access control.
    }

    /**
     * @description Allows the employee to read and write their own interactions.
     * @path /employees/{employeeId}/interactions/{interactionId}
     * @allow (create): User with ID {employeeId} can create an interaction with any content.
     * @allow (update): User with ID {employeeId} can update an existing interaction.
     * @deny (create): User with ID other_user cannot create an interaction for {employeeId}.
     * @deny (update): User with ID other_user cannot update an interaction for {employeeId}.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/interactions/{interactionId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Allows the employee to read and write their own PDI actions.
     * @path /employees/{employeeId}/pdiActions/{pdiActionId}
     * @allow (create): User with ID {employeeId} can create a PDI action with any content.
     * @allow (update): User with ID {employeeId} can update an existing PDI action.
     * @deny (create): User with ID other_user cannot create a PDI action for {employeeId}.
     * @deny (update): User with ID other_user cannot update a PDI action for {employeeId}.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/pdiActions/{pdiActionId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

   /**
     * @description Allows the employee to read and write their own meetings.
     * @path /employees/{employeeId}/meetings/{meetingId}
     * @allow (create): User with ID {employeeId} can create a meeting with any content.
     * @allow (update): User with ID {employeeId} can update an existing meeting.
     * @deny (create): User with ID other_user cannot create a meeting for {employeeId}.
     * @deny (update): User with ID other_user cannot update a meeting for {employeeId}.
     * @principle Enforces document ownership for writes.
     */
    match /employees/{employeeId}/meetings/{meetingId} {
      allow get: if isSignedIn() && isOwner(employeeId);
      allow list: if isSignedIn() && isOwner(employeeId);
      allow create: if isSignedIn() && isOwner(employeeId);
      allow update: if isSignedIn() && isExistingOwner(employeeId);
      allow delete: if isSignedIn() && isExistingOwner(employeeId);
    }

    /**
     * @description Allows read and write access to roles. This is an open write, but should be secured by RBAC in a full implementation.
     * @path /roles/{roleId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if true; // TODO: Add role-based access control.
     * @deny (create): if false;
     */
    match /roles/{roleId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add role-based access control.
    }

    /**
     * @description Allows read and write access to teams. This is an open write, but should be secured by RBAC in a full implementation.
     * @path /teams/{teamId}
     * @allow (get, list): if true;
     * @allow (create, update, delete): if true; // TODO: Add role-based access control.
     * @deny (create): if false;
     */
    match /teams/{teamId} {
      allow get, list: if true;
      allow create, update, delete: if true; // TODO: Add role-based access control.
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}